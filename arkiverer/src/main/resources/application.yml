server:
  port: 8091

cron:
  startRetryOfFailedArchiving: 0 00 12 22 JUN ?
failedApplications: ""

filefetchtimeouts:
  connectTimeout: 20
  callTimeout: 302
  readTimeout: 5
  writeTimeout: 5

archivingtimeouts:
  connectTimeout: 2
  readTimeout: 4
  exchangeTimeout: 4

management:
  endpoint:
    health:
      show-details: always
  endpoints.web:
    exposure:
      include: info, health, metrics, prometheus
    base-path: "/internal"
  metrics:
    export:
      prometheus:
        enabled: true
    web:
      server:
        request:
          autotime:
            enabled: true
kafka:
  applicationId: ${KAFKA_STREAMS_APPLICATION_ID}
  brokers: ${KAFKA_BROKERS}
  bootstrappingTimeout: 120
  delayBeforeKafkaInitialization: 5
  security:
    enabled: ${KAFKA_SECURITY}
    protocol: SSL
    keyStoreType: PKCS12
    keyStorePath: ${KAFKA_KEYSTORE_PATH}
    keyStorePassword: ${KAFKA_CREDSTORE_PASSWORD}
    trustStorePath: ${KAFKA_TRUSTSTORE_PATH}
    trustStorePassword: ${KAFKA_CREDSTORE_PASSWORD}
  topics:
    mainTopic: ${KAFKA_MAIN_TOPIC}
    processingTopic: ${KAFKA_PROCESSING_TOPIC}
    messageTopic: ${KAFKA_MESSAGE_TOPIC}
    arkiveringstilbakemeldingTopic: ${KAFKA_ARKIVERINGSTILBAKEMELDING_TOPIC}
    metricsTopic: ${KAFKA_METRICS_TOPIC}
    nologinSubmissionTopic: ${KAFKA_NOLOGIN_SUBMISSION_TOPIC}
  schemaRegistry:
    url: ${KAFKA_SCHEMA_REGISTRY}
    username: ${KAFKA_SCHEMA_REGISTRY_USER}
    password: ${KAFKA_SCHEMA_REGISTRY_PASSWORD}
services:
  tasklist:
    scheduling:
      startUpSeconds: 90
      secondsBetweenRetries: [1, 30, 60, 300, 1200, 3600, 21600]
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
joark:
  host: ${JOARK_HOST}
  sendToJoark: ${SEND_TO_JOARK}
  journal-post: /rest/journalpostapi/v1/journalpost
innsendingapi:
  host: ${INNSENDING_API_HOST}
saf:
  url: ${SAF_URL}
  path: /graphql
applicationName: "soknadsarkiverer"
status_log_url: ${STATUS_LOG_URL}

---
spring:
  config:
    activate:
      on-profile: default | dev | prod


failedApplications: ${FAILED_APPLICATIONS}
applicationName: ${NAIS_APP_NAME}

no.nav.security:
  jwt:
    issuer.azuread:
        discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
        accepted_audience: ${AZURE_APP_CLIENT_ID}
    client:
      registration:
        innsendingApi:
          token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
          grant-type: client_credentials
          scope: ${INNSENDING_API_SCOPE}
          authentication:
            client-id: ${AZURE_APP_CLIENT_ID}
            client-secret: ${AZURE_APP_CLIENT_SECRET}
            client-auth-method: client_secret_basic
        arkiv:
          token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
          grant-type: client_credentials
          scope: ${DOKARKIV_SCOPE}
          authentication:
            client-id: ${AZURE_APP_CLIENT_ID}
            client-secret: ${AZURE_APP_CLIENT_SECRET}
            client-auth-method: client_secret_basic

        saf-maskintilmaskin:
          token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
          grant-type: client_credentials
          scope: ${SAF_SCOPE}
          authentication:
            client-id: ${AZURE_APP_CLIENT_ID}
            client-jwk: ${AZURE_APP_JWK}
            client-auth-method: private_key_jwt
